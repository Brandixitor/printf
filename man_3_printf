.TH _printf 101
.SH NAME
_printf - formatted output conversion
.SH SYPNOSIS
.B _printf
.IR FORMAT

\fBint _printf(const char *\fR\fIformat\fR\fB, ...);\fR

SH DESCRIPTION
The function \fB_printf()\fR writes output to standard output. It receives the
\fIformat\fR argument as a character string which outputs based on the
arguments it recieves after \fIformat\fR. Each successive argument
should address a conversion specifier, addressed with the prefix \fI%\fR.

B o, u, x, X
.RS
These \fIunsigned int\fR specifiers convert the corresponding argument to a
number with a unique base notation. (\fBo\fR) converts the argument to an
octal (base 8) number. (\fBu\fR) converts the argument to a decimal (base
10) number. (\fBx\fR) converts to a hexadecimal (base 16) number with
lowercase letters, and (\fBX\fR) converts to a hexadecimal number with
uppercase letters.
.RE

.B d, i
.RS
Both correspond to an \fIint\fR argument to be passed to this specifier.
.RE

.B s
.RS
The \fIconst char *\fR specifier converts the corresponding argument to a
character string.
.RE

.B c
.RS
This \fIint\fR specifier converts the argument to an \fIunsigned char\fR to
be printed individually.
.RE

.B %
.RS
The percent will be directly written, with no argument being taken.
.RE

.B p
.RS
This \fIvoid *\fR pointer specifier is prints a pointer address
as a hexadecimal number with a preceding (\fB0x\fR) prepending it.
.RE

.B b
.RS
This \fIunsigned int\fR specifier converts the argument to its binary form.
.RE

.B r
.RS
This \fIchar *\fR specifier reverses a string argument and prints it.
.RE

.B R
.RS
This \fIchar *\fR specifier encodes the corresponding argument's letters
in ROT13 format.
.RE
